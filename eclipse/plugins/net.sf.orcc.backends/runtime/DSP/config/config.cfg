
var program = xdc.useModule('xdc.cfg.Program');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Cache = xdc.useModule('ti.sysbios.hal.Cache');
var ti_sysbios_family_c66_Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var xdc_runtime_Memory = xdc.useModule('xdc.runtime.Memory');
var ti_sysbios_knl_Clock = xdc.useModule('ti.sysbios.knl.Clock');
 
/*
program.sectMap[".args"]        = new Program.SectionSpec();
program.sectMap[".bss"]         = new Program.SectionSpec();
program.sectMap[".cinit"]       = new Program.SectionSpec();
program.sectMap[".cio"]         = new Program.SectionSpec();
program.sectMap[".const"]       = new Program.SectionSpec();
program.sectMap[".data"]        = new Program.SectionSpec();*/
program.sectMap[".far"]         = new Program.SectionSpec();/*
program.sectMap[".fardata"]     = new Program.SectionSpec();
program.sectMap[".neardata"]    = new Program.SectionSpec();
program.sectMap[".rodata"]      = new Program.SectionSpec();
program.sectMap[".stack"]       = new Program.SectionSpec();
program.sectMap[".switch"]      = new Program.SectionSpec();
program.sectMap[".sysmem"]      = new Program.SectionSpec();
program.sectMap[".text"]        = new Program.SectionSpec();
   */
// Must place these sections in core local memory 
/*
program.sectMap[".args"].loadSegment        = "L2SRAM";
program.sectMap[".cio"].loadSegment         = "L2SRAM";
*/
// Variables in the following data sections can potentially be 'shared' in
// OpenMP. These sections must be placed in shared memory.
/*
program.sectMap[".bss"].loadSegment         = "DDR3";
program.sectMap[".cinit"].loadSegment       = "DDR3";
program.sectMap[".const"].loadSegment       = "DDR3";
program.sectMap[".data"].loadSegment        = "DDR3";*/
program.sectMap[".far"].loadSegment         = "DDR3";/*
program.sectMap[".fardata"].loadSegment     = "MSMCSRAM";
program.sectMap[".neardata"].loadSegment    = "DDR3";
program.sectMap[".rodata"].loadSegment      = "DDR3";
program.sectMap[".sysmem"].loadSegment      = "DDR3";
*/
// Code sections shared by cores - place in shared memory to avoid duplication
//program.sectMap[".switch"].loadSegment      = program.platform.codeMemory;
//program.sectMap[".text"].loadSegment        = program.platform.codeMemory;


program.sectMap[".aux_mem"]        = new Program.SectionSpec(); //MCH

program.sectMap[".aux_mem"].loadSegment         = "MSMCSRAM";//MCH

program.sectMap[".aux_mem_2"]        = new Program.SectionSpec(); //MCH

program.sectMap[".aux_mem_2"].loadSegment         = "L2SRAM";//MCH


// Size the default stack and place it in L2SRAM 
program.stack = 0x20000; //MCH Antes 0x20000 esta stack sólo se utiliza en la inicialización de OpenMP
//program.sectMap[".stack"].loadSegment       = "L2SRAM";

xdc_runtime_Memory.defaultHeapSize = 20000;

//program.argSize = 0;

var ompSettings = xdc.useModule("ti.runtime.openmp.Settings");
ompSettings.usingRtsc = true ;

if (ompSettings.usingRtsc)
{
var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');
OpenMP.masterCoreIdx = 0;

 OpenMP.numCores      = 6; 


var ddr3 = Program.cpu.memoryMap["DDR3"];
var msmc = Program.cpu.memoryMap["MSMCSRAM"];
var msmcNcVirt = Program.cpu.memoryMap["OMP_MSMC_NC_VIRT"];
var msmcNcPhy = Program.cpu.memoryMap["OMP_MSMC_NC_PHY"];

OpenMP.msmcBase = msmc.base;
OpenMP.msmcSize = msmc.len;

OpenMP.msmcNoCacheVirtualBase = msmcNcVirt.base;
OpenMP.msmcNoCacheVirtualSize = msmcNcVirt.len;

OpenMP.msmcNoCachePhysicalBase = msmcNcPhy.base;

OpenMP.ddrBase = ddr3.base;
OpenMP.ddrSize = ddr3.len;

var HeapOMP = xdc.useModule('ti.runtime.ompbios.HeapOMP');

var sharedRegionId = 0;
var localHeapSize  = 0x8000;

///////////////////////////////////////////////////////////////////////////////////////
//Reducir el impacto de las heaps en la L2, llevándola a la MSMCSRAM
// 64K per core for stack +64K for other mallocs
var sharedHeapSize=0x600000; 
//var msmcmem = Program.cpu.memoryMap["MSMCSRAM"];
//Configure a SharedRegion with a heap in MSMC memory region
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(sharedRegionId,
						{
						base:ddr3.base,
						len:sharedHeapSize,
						ownerProcId:0,
						cacheEnable:true,
						createHeap:true,
						isValid:true,
						name:"DDR3_SR0",
						});
///////////////////////////////////////////////////////////////////////////////////////

/*var sharedHeapSize = 0x8000000;  //Re-localizada en MSMCSRAM MCH

var SharedRegion=xdc.useModule('ti.sdo.ipc.SharedRegion');

SharedRegion.setEntryMeta(sharedRegionId,
							{	base:ddr3.base,
								len:sharedHeapSize,
								ownerProcId:0,
								cacheEnable:true,
								createHeap:true,
								isValid:true,
								name:"DDR3_SR0",
							});*/  //Re-localizada en MSMCSRAM MCH

HeapOMP.configure(sharedRegionId,localHeapSize);

var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns.$add('&__TI_omp_reset_rtsc_mode');

var Startup = xdc.useModule('xdc.runtime.Startup');
Startup.lastFxns.$add('&__TI_omp_initialize_rtsc_mode');

}
else
{
  program.heap = sharedHeapSize;
}

