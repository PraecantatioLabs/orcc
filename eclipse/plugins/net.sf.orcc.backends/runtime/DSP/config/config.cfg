
// SYS/BIOS modules activation
var program = xdc.useModule('xdc.cfg.Program');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Cache = xdc.useModule('ti.sysbios.hal.Cache');
var ti_sysbios_family_c66_Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var xdc_runtime_Memory = xdc.useModule('xdc.runtime.Memory');
var ti_sysbios_knl_Clock = xdc.useModule('ti.sysbios.knl.Clock');

// Place big variables and buffers in DDR3
program.sectMap[".far"] = new Program.SectionSpec();
program.sectMap[".far"].loadSegment = "DDR3";

// MCH attempting for future optimizations 
program.sectMap[".aux_mem"]        = new Program.SectionSpec();
program.sectMap[".aux_mem"].loadSegment         = "MSMCSRAM";
program.sectMap[".aux_mem_2"]        = new Program.SectionSpec(); 
program.sectMap[".aux_mem_2"].loadSegment         = "L2SRAM";


// Size the default stack and place it in L2SRAM 
program.stack = 0x20000; 
xdc_runtime_Memory.defaultHeapSize = 20000;

// OpenMP configuration
var ompSettings = xdc.useModule("ti.runtime.openmp.Settings");
ompSettings.usingRtsc = true ;

if (ompSettings.usingRtsc)
{
var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');
OpenMP.masterCoreIdx = 0;

// Num Cores
 OpenMP.numCores = 2; 

var ddr3 = Program.cpu.memoryMap["DDR3"];
var msmc = Program.cpu.memoryMap["MSMCSRAM"];
var msmcNcVirt = Program.cpu.memoryMap["OMP_MSMC_NC_VIRT"];
var msmcNcPhy = Program.cpu.memoryMap["OMP_MSMC_NC_PHY"];

OpenMP.msmcBase = msmc.base;
OpenMP.msmcSize = msmc.len;

OpenMP.msmcNoCacheVirtualBase = msmcNcVirt.base;
OpenMP.msmcNoCacheVirtualSize = msmcNcVirt.len;

OpenMP.msmcNoCachePhysicalBase = msmcNcPhy.base;

OpenMP.ddrBase = ddr3.base;
OpenMP.ddrSize = ddr3.len;

var HeapOMP = xdc.useModule('ti.runtime.ompbios.HeapOMP');

var sharedRegionId = 0;
var localHeapSize  = 0x8000;

// 64K per core for stack +64K for other mallocs, now set for 8 cores
var sharedHeapSize=0x800000; 
//Configure a SharedRegion with a heap in MSMC memory region
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(sharedRegionId,
						{
						base:ddr3.base,
						len:sharedHeapSize,
						ownerProcId:0,
						cacheEnable:true,
						createHeap:true,
						isValid:true,
						name:"DDR3_SR0",
						});

HeapOMP.configure(sharedRegionId,localHeapSize);

var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns.$add('&__TI_omp_reset_rtsc_mode');

var Startup = xdc.useModule('xdc.runtime.Startup');
Startup.lastFxns.$add('&__TI_omp_initialize_rtsc_mode');

}
else
{
  program.heap = sharedHeapSize;
}

